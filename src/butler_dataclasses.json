{
		DatabaseDescriptor : {
				fields : {
						name : QString, # will be the connection name
						driver : QString, # for example QSQLITE
						databaseName : QString, # file name in case of sqlite
						username : QString,
						password : QString,
						savePassword : bool,
						host : QString, # host name or ip
						port : unsigned
				},
				key : name
		},
		Tag : {
				fields : {
						name : Text,
						description : Text,
						lastModified : DateTime # non editable
				},
				key : name
		},
		Ware : {
				fields : {
						name : Text,
						unit : Text,
						types : TypeNameSet,
						tags : TagNameSet,
						lastModified : DateTime # non editable
				},
				key : name
		},
		Company : {
				fields : {
						name : Text, # Tesco Global Áruházak ZRt.
						country : Text, # Magyarország
						city : Text, #Budaörs
						postalCode : Text, # 2040
						address : Text, # Kinizsi út 1-3.
						taxId : Text, # 10307078-2-44
						icon : Text, # base64 representation of an image
						lastModified : DateTime # non editable
				},
				key : name
		},
		Brand : {
				fields : {
						name : Text,
						company : Text,
						lastModified : DateTime # non editable
				},
				key : name
		},
		Inventory : {
				fields : {
						name : Text,
						comment : Text,
						lastModified : DateTime # non editable
				},
				key : name
		},
		InventoryChange : {
				fields : {
						uploadDate : DateTime,	# non editable
						name : Text,
						type : Text,
						brand : Text,
						quantity : double,		# amount to buy or bought
						partner : Text,
						inventory : Text,
						comment : Text,
						invChangeDate : DateTime, # when ownership changes
						lastModified : DateTime	# non editable
				},
				key : uploadDate
		},
		Partner : {
				fields : {
						name : Text, # Kertvárosi tesco
						country : Text, # Magyarország
						city : Text, # Pécs
						postalCode : Text, # 7631
						address : Text, # Kincses út 1.
						company : Text, # Tesco Global Áruházak ZRt.
						storeName : Text, # 41052 számú bolt
						lastModified : DateTime # non editable
				},
				key : name
		},
		Accounts : {
				fields : {
						name : Text,
						currency : Text,
						bankOffice : Text,
						iban : Text,
						swiftCode : Text,
						lastModified : DateTime # non editable
				},
				key : name
		},
		Payments : {
				fields : {
						uploadDate : DateTime,
						account : Text,
						partner : Text,
						amount : double,
						subject : DateTime,
						payDate : DateTime,
						lastModified : DateTime # non editable
				},
				key : uploadDate
		},
		Query : {
				enums : {
						StockOptions : {
								AllBoughtItem : "",
								ItemsOnStock : "",
								ItemsUsedUp : ""
						},
						TagOptions : {
								MatchAll : "",
								MatchAny : ""
						}
				},
				fields : {
						name : Text,
						startDate : DateTime,
						endDate : DateTime,
						stockOption : enum StockOptions,
						tagOption : enum TagOptions,
						withTags : TagNameSet,
						withoutTags : TagNameSet,
						wares : WareNameSet,
						partners : PartnerNameSet,
						lastModified : DateTime # Non editable
				},
				key : name
		},
		Item : {
				fields : {
						uploaded : DateTime,	# non editable
						name : Text,
						type : Text,
						quantity : double,		# amount to buy or bought
						bought : bool,			# shows whether the below fields have sense
						purchased : DateTime,	# item considered bought if valid,
												# default value should suggested by
												# gui but editable
						partner : Text,
						price : double,			# price of gross piece/amount quantity
												# expected price if not yet bought;
												# should set to 0 when bought to notify
												# to set the real paid price.
						onStock : bool,			# do we have it on store?
												# when marked to no, advise to put on shopping list
						comment : Text,
						lastModified : DateTime	# non editable
				},
				key : uploaded
		}
}
