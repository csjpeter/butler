name: Build Android Package

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ "master", "stable", "release/*" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-android-package:
    name: Build Android APK
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '11'

    - name: Install Qt for Android
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: 'linux'
        target: 'android'
        arch: 'android_arm64_v8a'
        modules: 'qtbase'
        cache: true
        set-env: true

    - name: Install Qt for Linux (host tools)
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        host: 'linux'
        target: 'desktop'
        arch: 'gcc_64'
        modules: 'qtbase'
        cache: true
        set-env: false

    - name: Set up Android SDK and NDK
      run: |
        # Install Android SDK components
        sudo apt-get update
        sudo apt-get install -y wget unzip
        
        # Download Android command line tools
        mkdir -p ${HOME}/android-sdk/cmdline-tools
        cd ${HOME}/android-sdk/cmdline-tools
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
        unzip -q commandlinetools-linux-9477386_latest.zip
        mv cmdline-tools latest
        
        # Set environment variables
        echo "ANDROID_SDK_ROOT=${HOME}/android-sdk" >> $GITHUB_ENV
        echo "ANDROID_HOME=${HOME}/android-sdk" >> $GITHUB_ENV
        echo "${HOME}/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
        echo "${HOME}/android-sdk/platform-tools" >> $GITHUB_PATH
        
        # Accept licenses and install required components
        yes | ${HOME}/android-sdk/cmdline-tools/latest/bin/sdkmanager --licenses || true
        ${HOME}/android-sdk/cmdline-tools/latest/bin/sdkmanager "platform-tools"
        ${HOME}/android-sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-30"
        ${HOME}/android-sdk/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
        ${HOME}/android-sdk/cmdline-tools/latest/bin/sdkmanager "ndk;21.4.7075529"
        
        # Set NDK path
        echo "ANDROID_NDK_ROOT=${HOME}/android-sdk/ndk/21.4.7075529" >> $GITHUB_ENV
        echo "ANDROID_NDK=${HOME}/android-sdk/ndk/21.4.7075529" >> $GITHUB_ENV

    - name: Build for Android
      run: |
        # Create build directory
        mkdir -p build-android
        cd build-android
        
        # Find Qt installation paths
        QT_ANDROID_ROOT="${Qt5_DIR}/../../.."
        QT_HOST_ROOT="${Qt5_DIR}/../../../../../gcc_64"
        
        echo "Qt Android root: ${QT_ANDROID_ROOT}"
        echo "Qt Host root: ${QT_HOST_ROOT}"
        
        # Set Qt paths
        export QT_HOST_PATH=${QT_HOST_ROOT}
        export ANDROID_NDK_HOST=linux-x86_64
        export ANDROID_API_VERSION=android-30
        
        # Configure with CMake
        cmake .. \
          -DCMAKE_SYSTEM_NAME=Android \
          -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a \
          -DCMAKE_ANDROID_NDK=${ANDROID_NDK_ROOT} \
          -DCMAKE_ANDROID_STL_TYPE=c++_shared \
          -DCMAKE_ANDROID_API=30 \
          -DCMAKE_PREFIX_PATH="${QT_ANDROID_ROOT}" \
          -DQt5_DIR="${Qt5_DIR}" \
          -DCMAKE_FIND_ROOT_PATH="${QT_ANDROID_ROOT}" \
          -DCMAKE_BUILD_TYPE=Release \
          -DANDROID_PLATFORM=android-30 \
          -DANDROID_ABI=arm64-v8a \
          -DQT_ANDROID_BUILD_ALL_ABIS=OFF
        
        # Build
        cmake --build . --config Release

    - name: Prepare Android deployment
      run: |
        cd build-android
        
        # Create deployment directory
        mkdir -p android-build
        
        # Find the built library
        BUTLER_LIB=$(find . -name "libbutler*.so" | head -1)
        
        if [ -z "$BUTLER_LIB" ]; then
          echo "Error: Butler library not found"
          exit 1
        fi
        
        echo "Found Butler library: $BUTLER_LIB"
        
        # Copy library to deployment directory
        mkdir -p android-build/libs/arm64-v8a
        cp $BUTLER_LIB android-build/libs/arm64-v8a/libbutler.so

    - name: Get version
      id: get_version
      run: |
        if [[ "${{ github.ref_name }}" == v* ]]; then
          VERSION="${{ github.ref_name }}"
          VERSION_NUM="${VERSION#v}"
        else
          VERSION="dev"
          VERSION_NUM="0.2.5"
        fi
        # Generate version code: convert X.Y.Z to XXYYZZ format (e.g., 0.2.5 -> 000205)
        IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NUM"
        VERSION_MAJOR=${VERSION_PARTS[0]:-0}
        VERSION_MINOR=${VERSION_PARTS[1]:-0}
        VERSION_PATCH=${VERSION_PARTS[2]:-0}
        VERSION_CODE=$(printf "%02d%02d%02d" $VERSION_MAJOR $VERSION_MINOR $VERSION_PATCH | sed 's/^0*//')
        if [ -z "$VERSION_CODE" ] || [ "$VERSION_CODE" = "0" ]; then
          VERSION_CODE="1"
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_num=${VERSION_NUM}" >> $GITHUB_OUTPUT
        echo "version_code=${VERSION_CODE}" >> $GITHUB_OUTPUT
        echo "version_major=${VERSION_MAJOR}" >> $GITHUB_OUTPUT
        echo "Version: ${VERSION}, Version Number: ${VERSION_NUM}, Version Code: ${VERSION_CODE}"

    - name: Prepare androiddeployqt configuration
      run: |
        cd build-android
        
        # Find Qt installation paths
        QT_ANDROID_ROOT="${Qt5_DIR}/../../.."
        QT_HOST_ROOT="${Qt5_DIR}/../../../../../gcc_64"
        
        # Get absolute path to application binary
        APP_BINARY_PATH="$(pwd)/android-build/libs/arm64-v8a/libbutler.so"
        
        # Create deployment settings JSON
        cat > android-deployment-settings.json << EOF
        {
          "description": "Butler Android Deployment Configuration",
          "qt": "${QT_ANDROID_ROOT}",
          "sdk": "${ANDROID_SDK_ROOT}",
          "ndk": "${ANDROID_NDK_ROOT}",
          "sdkBuildToolsRevision": "30.0.3",
          "toolchain-prefix": "aarch64-linux-android",
          "tool-prefix": "aarch64-linux-android",
          "ndk-host": "linux-x86_64",
          "target-architecture": "arm64-v8a",
          "application-binary": "${APP_BINARY_PATH}",
          "android-package-source-directory": "${GITHUB_WORKSPACE}/android",
          "android-package": "com.butler",
          "android-app-name": "Butler",
          "android-version-name": "${{ steps.get_version.outputs.version_num }}",
          "android-version-code": "${{ steps.get_version.outputs.version_code }}"
        }
        EOF
        
        cat android-deployment-settings.json

    - name: Prepare Android resources
      run: |
        # Copy Android manifest and resources
        mkdir -p build-android/android-build
        
        # Process AndroidManifest.xml.in
        # Note: @VERSION_MAJOR@ in manifest is used for versionCode (integer)
        sed -e "s|@PRJNAME@|butler|g" \
            -e "s|@VERSION_MAJOR@|${{ steps.get_version.outputs.version_code }}|g" \
            -e "s|@VERSION@|${{ steps.get_version.outputs.version_num }}|g" \
            -e "s|@PKGNAME_BASE@|butler|g" \
            android/AndroidManifest.xml.in > build-android/android-build/AndroidManifest.xml
        
        # Copy resource directory
        cp -r android/res build-android/android-build/
        
        # Process strings.xml.in
        sed -e "s|@PKGNAME_BASE@|Butler|g" \
            android/res/values/strings.xml.in > build-android/android-build/res/values/strings.xml
        
        # Process libs.xml.in (keep as-is for now)
        cp android/res/values/libs.xml.in build-android/android-build/res/values/libs.xml
        
        # Copy icon from share/icons to Android drawable
        mkdir -p build-android/android-build/res/drawable-mdpi
        mkdir -p build-android/android-build/res/drawable-hdpi
        mkdir -p build-android/android-build/res/drawable-xhdpi
        mkdir -p build-android/android-build/res/drawable-xxhdpi
        
        # Use butler.png as the app icon
        # TODO: Ideally should resize for different densities:
        #   mdpi: 48px, hdpi: 72px, xhdpi: 96px, xxhdpi: 144px
        # For now, copying the same icon to all densities for simplicity
        if [ -f "share/icons/butler.png" ]; then
          cp share/icons/butler.png build-android/android-build/res/drawable-mdpi/icon.png
          cp share/icons/butler.png build-android/android-build/res/drawable-hdpi/icon.png
          cp share/icons/butler.png build-android/android-build/res/drawable-xhdpi/icon.png
          cp share/icons/butler.png build-android/android-build/res/drawable-xxhdpi/icon.png
        fi
        
        # Copy translations
        mkdir -p build-android/android-build/assets/translations
        if [ -d "share/translations" ]; then
          cp share/translations/*.qm build-android/android-build/assets/translations/ 2>/dev/null || true
        fi

    - name: Build APK with androiddeployqt
      run: |
        cd build-android
        
        # Find Qt host tools path
        QT_HOST_ROOT="${Qt5_DIR}/../../../../../gcc_64"
        
        # Run androiddeployqt
        ${QT_HOST_ROOT}/bin/androiddeployqt \
          --input android-deployment-settings.json \
          --output android-build \
          --android-platform android-30 \
          --gradle \
          --release

    - name: Sign APK
      run: |
        cd build-android/android-build/build/outputs/apk/release
        
        # Use debug keystore for signing
        ${ANDROID_SDK_ROOT}/build-tools/30.0.3/apksigner sign \
          --ks ${GITHUB_WORKSPACE}/android/debug.keystore \
          --ks-key-alias androiddebugkey \
          --ks-pass pass:android \
          --key-pass pass:android \
          --out butler-${{ steps.get_version.outputs.version }}-arm64-v8a.apk \
          android-build-release-unsigned.apk
        
        # Verify signature
        ${ANDROID_SDK_ROOT}/build-tools/30.0.3/apksigner verify \
          butler-${{ steps.get_version.outputs.version }}-arm64-v8a.apk

    - name: Copy APK to workspace
      run: |
        cp build-android/android-build/build/outputs/apk/release/butler-${{ steps.get_version.outputs.version }}-arm64-v8a.apk .

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          butler-${{ steps.get_version.outputs.version }}-arm64-v8a.apk
        name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifact (for non-tag builds)
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      uses: actions/upload-artifact@v4
      with:
        name: android-apk-arm64-v8a
        path: butler-${{ steps.get_version.outputs.version }}-arm64-v8a.apk
        retention-days: 30
