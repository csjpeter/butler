# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Build Workflow

on:
  push:
    branches: [ "dev/*" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "master", "stable", "release/*" ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Debug Build
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Debug]
        c_compiler: [gcc, clang, cl]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: windows-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y qtbase5-dev libsqlite3-dev

    - name: Install Dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install qt5-default

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Setup Test Environment
      # Create testdir required by some tests
      run: mkdir -p ${{ github.workspace }}/testdir

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

  build-debian-package:
    name: Build Debian Package for Ubuntu 24.04
    runs-on: ubuntu-24.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          debhelper-compat \
          cmake \
          pkg-config \
          qtbase5-dev \
          qtbase5-dev-tools \
          libqt5sql5-sqlite \
          libsqlite3-dev \
          dpkg-dev \
          build-essential

    - name: Build Debian package
      run: |
        dpkg-buildpackage -us -uc -b

    - name: List generated packages
      run: |
        ls -lh ../*.deb ../*.ddeb 2>/dev/null || true
        mkdir -p packages
        mv ../*.deb packages/ 2>/dev/null || true
        mv ../*.ddeb packages/ 2>/dev/null || true
        ls -lh packages/

    - name: Get package version
      id: get_version
      run: |
        if [ -n "${{ github.ref_name }}" ] && [[ "${{ github.ref_name }}" == v* ]]; then
          VERSION="${{ github.ref_name }}"
        else
          VERSION=$(dpkg-parsechangelog -S Version)
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Package version: ${VERSION}"

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          packages/*.deb
          packages/*.ddeb
        name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload artifacts (for non-tag builds)
      if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      uses: actions/upload-artifact@v4
      with:
        name: debian-packages-ubuntu-24.04
        path: |
          packages/*.deb
          packages/*.ddeb
        retention-days: 30
