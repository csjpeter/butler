/* vim:set noet sw=8 ts=8 sts=8: */
#include "style.inc"

#define SIBLING edge[constraint=false];
#define HIDDEN edge[style=invis];
#define SHORT_EDGE edge[minlen=1];
#define LONG_EDGE edge[minlen=15];
#define MEDIUM_LENGTH_EDGE edge[minlen=4];

digraph class_butler {
	DEFAULTS;

	subgraph clusterNodes {
		label="Nodes"

		subgraph clusterCollections {
			label="Collections of classes"

			{	NOSHAPE
				ComponentNote[label="a part of some bigger entity\l"];
				PackageNote[label="collection of classes to be \ldistributed together\l"];
			}
			{	HIDDEN
				PackageNote -> ComponentNote;
			}
			COMPONENT Component;
			{	PACKAGE Package;
			}
			{	SIBLING HIDDEN
				MEDIUM_LENGTH_EDGE
					Component -> ComponentNote;
				Package -> PackageNote;
			}
			{	HIDDEN
				Package -> Component;
			}
		}

		subgraph clusterInstantiable {
			label="Instantiables"

			{	NOSHAPE
				ClassNote[label="class not matching any of \lthe special ones below\l"];
				TemplateNote[label="class that has type parameter"];
			}
			{	HIDDEN
				ClassNote -> PackageNote;
				TemplateNote -> ClassNote;
			}
			{
				CLASS Class;
				TEMPLATE Template;
			}
			{	SIBLING HIDDEN
				MEDIUM_LENGTH_EDGE
				Class -> ClassNote;
				Template -> TemplateNote;
			}
			{	HIDDEN
				Class -> Package;
				Template -> Class;
			}
		}

		subgraph clusterNonInstantiable {
			label="Noninstantiables"

			{	NOSHAPE
				ConceptNote[label="collection of requirements both \lin declaration and definitions\l"];
				InterfaceNote[label="fully abstract class having no \ldefined method nor data member\l"];
				AbstractNote[label="class having at least one \lundefined method\l"];
			}
			{	HIDDEN
				ConceptNote -> TemplateNote;
				InterfaceNote -> ConceptNote;
				AbstractNote -> InterfaceNote;
			}
			{
				CONCEPT Concept;
				INTERFACE Interface;
				ABSTRACT Abstract;
			}
			{	SIBLING HIDDEN
				MEDIUM_LENGTH_EDGE
				Concept -> ConceptNote;
				Interface -> InterfaceNote;
				Abstract -> AbstractNote;
			}
			{	HIDDEN
				Concept -> Template;
				Interface -> Concept;
				Abstract -> Interface;
			}
		}
	}

	subgraph clusterRelations {
		label="Relations";
		subgraph clusterAssociation {
			fontsize=10;
			label="Association (bidirectional)\nBoth actors know about the other.\l";
			LONG_EDGE
			{ ASSOCIATION SIBLING one -> other; }
		}

		subgraph clusterKnowledge {
			fontsize=10;
			label="Knowledge (unidirectional)\nOnly 'unknown' knows about 'known'. The direction of the arrow points to 'known', which is known by 'unknown'.\l";
			LONG_EDGE
			{ KNOWLEDGE SIBLING unknown -> known; }
		}

		subgraph clusterInheritance {
			fontsize=10;
			label="Inheritance (unidirectional)\nOnly child knows about parent. On an instance of child, the members of parent can be used.\l";
			LONG_EDGE
			{ INHERITANCE SIBLING child -> parent; }
		}

		subgraph clusterImplementation {
			fontsize=10;
			label="Implementation (unidirectional)\nOnly implementor knows about the interface it is implementing.\l";
			LONG_EDGE
			{ IMPLEMENTATION SIBLING implementor -> interface; }
		}

		subgraph clusterConformance {
			fontsize=10;
			label="Conformance (unidirectional)\nOnly conforming one knows about the concept to conform to.\l";
			LONG_EDGE
			{ CONFORMANCE SIBLING conforming -> concept; }
		}

		subgraph clusterAggregation {
			fontsize=10;
			label="Aggregation (unidirectional)\nOnly whole knows about part. Lifecycle of part does not depend on lifecycle of whole.\l";
			LONG_EDGE
			{ AGGREGATION SIBLING whole -> part; }
		}

		subgraph clusterComposition {
			fontsize=10;
			label="Composition (unidirectional)\nOnly whole knows about part. Lifecycle of part is determined by lifecycle of whole.\l";
			LONG_EDGE
			{ COMPOSITION SIBLING wholeC -> partC; }
		}

		subgraph clusterDependency {
			fontsize=10;
			label="Dependency (unidirectional)\nOnly dependent knows about the independent. Some operation on dependent will invoke operation on the independent. \lThe result of the operation on independent has influence on the dependent's operation.\l"
			LONG_EDGE
			{ DEPENDENCY SIBLING dependent -> independent; }
		}

		{ HIDDEN
			unknown -> one;
			child -> unknown;
			implementor -> child;
			conforming -> implementor;
			whole -> conforming;
			wholeC -> whole;
			independent -> wholeC;
		}
	}

	subgraph clusterOthers {
		label="Further notifications";
		SHORT_EDGE
		{ CLASS FOREIGN
			PkgForeign [label="A class not in Package \lbut being related to some other \linside Package.\l"];
		}
		subgraph clusterPackage {
			label="Package, Namespace or Component\l";
		{ CLASS 
			PkgClass [label="Normal class that belongs \lto the package.\l"];
		}
		{ CLASS PRIVATE
			PkgPrivate [label="Private class within Package \lthat's header will not be \lin the distributed package.\l"];
		}
		{ CLASS ADD
			PkgAdd [label="Additional class for Package \lthat is not yet implemented.\l"];
		}
		{ CLASS REMOVE
			PkgRemove [label="Obsolote class in Package \lto be removed.\l"];
		}
		}

		{ HIDDEN
			PkgClass -> PkgForeign;
			PkgPrivate -> PkgClass;
			PkgAdd -> PkgPrivate;
			PkgRemove -> PkgAdd;
		}
	}
}

